import Head from 'next/head'
import Image from 'next/image'
import { Roboto } from '@next/font/google'
import styles from '@/styles/Home.module.css'
import { ChangeEvent, Children, Component, createElement, useEffect, useRef, useState } from 'react'
import Modal from '@mui/material/Modal';
import TextField from '@mui/material/TextField';
import $ from 'jquery';
import dynamic from 'next/dynamic'
import Script from 'next/script'
// import { useEditor } from '../editor'

const roboto = Roboto({ weight: ["100", "300", "500"], subsets: ["latin"] })

// @ts-ignore
// const DynamicEditor = dynamic(() => import('../editor'), { ssr: false })

export default function Home() {
  const planRef = useRef<HTMLDivElement>(null);
  const unitRef = useRef<HTMLIFrameElement>(null);
  const [ currentSVG, setCurrentSVG ]= useState<string>("");
  const [ unitID, setUnitID ] = useState<number>(163);
  const [ showModal, setShowModal ] = useState<boolean>(false);
  const [ textElement, setTextElement] = useState<string>("");

  async function openSVG(event: ChangeEvent<HTMLInputElement>) {
    if (event.target.files != null) {
      setCurrentSVG(await event.target.files[0].text());
    }
  }

  function writeTextElement(unitID: number, textValue: string) {
    const canvasRect = $(planRef.current!).find('svg')[0].getBoundingClientRect();
    const unitRect = $(planRef.current!).find(`path[id="unit-${unitID}"]`)[0].getBoundingClientRect();

    console.log(canvasRect);
    console.log(unitRect);

    const textElement = document.createElementNS('http://www.w3.org/2000/svg', 'text');
    textElement.textContent = textValue;
    textElement.id = `unit-${unitID}`;
    textElement.setAttribute('x', (unitRect.left + window.scrollX).toFixed(4));
    textElement.setAttribute('y', (unitRect.top + window.scrollY).toFixed(4));
    $(planRef.current!).find(`path[id="unit-${unitID}"]`).after(textElement);
  }

  function centerSVGElement(parent: string, element: string) {

  }

  function addImage() {
    console.log("CLICKED IMAGE")
  }

  function addText() {
    
  }

  function retrieveObjects() {
    
  }

  async function selectUnit(unitID: string) {
    setUnitID(parseInt(unitID.substring(5)));
    setShowModal(true);
    // $(unitRef.current).find('script[type=module]')[0].set
  }

  useEffect(() => {
    if (currentSVG) {
      planRef.current!.innerHTML = currentSVG;
      $(planRef.current!).find('path[style*="rgb(15.293884%,46.273804%,73.332214%)"]').attr('id', (index) => `unit-${index}`).css('cursor', 'pointer').on('click', (event) => selectUnit(event.target.id));
    }
  }, [currentSVG]);

  // useEditor();

  return (
    <>
      <Head>
        <title>Helmut POC</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${roboto.className} ${styles.main}`}>
        <Script id="svg-editor" src="../../editor/Editor.js">
          {
            `
            const svgEditor = new Editor(document.getElementById('canvas'))
            svgEditor.init()
            svgEditor.setConfig({
              allowInitialUserOverride: true,
              extensions: [],
              noDefaultExtensions: false,
              userExtensions: []
            })
            `
          }
        </Script>
        <Modal
          className={`${roboto.className} dialog`}
          open={showModal}
          onClose={() => setShowModal(false)}
        >
          <div className={styles.dialog}>
            <div id="canvas" style={{ width: "100vw", height: "100vh" }}></div>
            {/* <iframe id="canvas" ref={unitRef} src="http://localhost:8000/src/editor/index.html" style={{ width: "70vw", height: "70vh" }}></iframe> */}
            <p className={styles.unitID}>{unitID}</p>
            <a className={styles.button}>Retrieve Objects</a>
            <TextField 
              id="text-value" 
              label="Text" 
              variant="outlined" 
              value={textElement}
              onChange={(e) => setTextElement(e.target.value)}
            />
            <a className={styles.button} onClick={() => writeTextElement(unitID, textElement)}>Add Text</a>
          </div>
        </Modal>
        <div className={styles.canvas} ref={planRef}/>
        <div className={styles.controls}>
          <input type="file" className={styles.button} onChange={openSVG}/>
          {/* <a className={styles.button} onClick={addImage}>Add Image</a> */}
          {/* <a className={styles.button} onClick={() => setShowModal(true)}>Open Dialog</a> */}
        </div>
      </main>
    </>
  )
}
